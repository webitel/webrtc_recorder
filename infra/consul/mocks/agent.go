// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	api "github.com/hashicorp/consul/api"

	mock "github.com/stretchr/testify/mock"
)

// Agent is an autogenerated mock type for the Agent type
type Agent struct {
	mock.Mock
}

// FailTTL provides a mock function with given fields: checkID, note
func (_m *Agent) FailTTL(checkID string, note string) error {
	ret := _m.Called(checkID, note)

	if len(ret) == 0 {
		panic("no return value specified for FailTTL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(checkID, note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PassTTL provides a mock function with given fields: checkID, note
func (_m *Agent) PassTTL(checkID string, note string) error {
	ret := _m.Called(checkID, note)

	if len(ret) == 0 {
		panic("no return value specified for PassTTL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(checkID, note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceDeregister provides a mock function with given fields: serviceID
func (_m *Agent) ServiceDeregister(serviceID string) error {
	ret := _m.Called(serviceID)

	if len(ret) == 0 {
		panic("no return value specified for ServiceDeregister")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(serviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceRegister provides a mock function with given fields: service
func (_m *Agent) ServiceRegister(service *api.AgentServiceRegistration) error {
	ret := _m.Called(service)

	if len(ret) == 0 {
		panic("no return value specified for ServiceRegister")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*api.AgentServiceRegistration) error); ok {
		r0 = rf(service)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAgent creates a new instance of Agent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAgent(t interface {
	mock.TestingT
	Cleanup(func())
}) *Agent {
	mock := &Agent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
