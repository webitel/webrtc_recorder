// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	api "github.com/hashicorp/consul/api"
	mock "github.com/stretchr/testify/mock"
)

// Servicer is an autogenerated mock type for the Servicer type
type Servicer struct {
	mock.Mock
}

// Service provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Servicer) Service(_a0 string, _a1 string, _a2 bool, _a3 *api.QueryOptions) ([]*api.ServiceEntry, *api.QueryMeta, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for Service")
	}

	var r0 []*api.ServiceEntry
	var r1 *api.QueryMeta
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, bool, *api.QueryOptions) ([]*api.ServiceEntry, *api.QueryMeta, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(string, string, bool, *api.QueryOptions) []*api.ServiceEntry); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.ServiceEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, bool, *api.QueryOptions) *api.QueryMeta); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*api.QueryMeta)
		}
	}

	if rf, ok := ret.Get(2).(func(string, string, bool, *api.QueryOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewServicer creates a new instance of Servicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Servicer {
	mock := &Servicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
