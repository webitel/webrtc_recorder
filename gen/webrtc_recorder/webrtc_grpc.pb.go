// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: webrtc.proto

package webrtc_recorder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebRTCService_UploadP2PVideo_FullMethodName      = "/webrtc_recorder.WebRTCService/UploadP2PVideo"
	WebRTCService_StopP2PVideo_FullMethodName        = "/webrtc_recorder.WebRTCService/StopP2PVideo"
	WebRTCService_RenegotiateP2PVideo_FullMethodName = "/webrtc_recorder.WebRTCService/RenegotiateP2PVideo"
)

// WebRTCServiceClient is the client API for WebRTCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebRTCServiceClient interface {
	UploadP2PVideo(ctx context.Context, in *UploadP2PVideoRequest, opts ...grpc.CallOption) (*UploadP2PVideoResponse, error)
	StopP2PVideo(ctx context.Context, in *StopP2PVideoRequest, opts ...grpc.CallOption) (*StopP2PVideoResponse, error)
	RenegotiateP2PVideo(ctx context.Context, in *RenegotiateP2PVideoRequest, opts ...grpc.CallOption) (*RenegotiateP2PVideoResponse, error)
}

type webRTCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebRTCServiceClient(cc grpc.ClientConnInterface) WebRTCServiceClient {
	return &webRTCServiceClient{cc}
}

func (c *webRTCServiceClient) UploadP2PVideo(ctx context.Context, in *UploadP2PVideoRequest, opts ...grpc.CallOption) (*UploadP2PVideoResponse, error) {
	out := new(UploadP2PVideoResponse)
	err := c.cc.Invoke(ctx, WebRTCService_UploadP2PVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCServiceClient) StopP2PVideo(ctx context.Context, in *StopP2PVideoRequest, opts ...grpc.CallOption) (*StopP2PVideoResponse, error) {
	out := new(StopP2PVideoResponse)
	err := c.cc.Invoke(ctx, WebRTCService_StopP2PVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCServiceClient) RenegotiateP2PVideo(ctx context.Context, in *RenegotiateP2PVideoRequest, opts ...grpc.CallOption) (*RenegotiateP2PVideoResponse, error) {
	out := new(RenegotiateP2PVideoResponse)
	err := c.cc.Invoke(ctx, WebRTCService_RenegotiateP2PVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebRTCServiceServer is the server API for WebRTCService service.
// All implementations must embed UnimplementedWebRTCServiceServer
// for forward compatibility
type WebRTCServiceServer interface {
	UploadP2PVideo(context.Context, *UploadP2PVideoRequest) (*UploadP2PVideoResponse, error)
	StopP2PVideo(context.Context, *StopP2PVideoRequest) (*StopP2PVideoResponse, error)
	RenegotiateP2PVideo(context.Context, *RenegotiateP2PVideoRequest) (*RenegotiateP2PVideoResponse, error)
	mustEmbedUnimplementedWebRTCServiceServer()
}

// UnimplementedWebRTCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebRTCServiceServer struct {
}

func (UnimplementedWebRTCServiceServer) UploadP2PVideo(context.Context, *UploadP2PVideoRequest) (*UploadP2PVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadP2PVideo not implemented")
}
func (UnimplementedWebRTCServiceServer) StopP2PVideo(context.Context, *StopP2PVideoRequest) (*StopP2PVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopP2PVideo not implemented")
}
func (UnimplementedWebRTCServiceServer) RenegotiateP2PVideo(context.Context, *RenegotiateP2PVideoRequest) (*RenegotiateP2PVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenegotiateP2PVideo not implemented")
}
func (UnimplementedWebRTCServiceServer) mustEmbedUnimplementedWebRTCServiceServer() {}

// UnsafeWebRTCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebRTCServiceServer will
// result in compilation errors.
type UnsafeWebRTCServiceServer interface {
	mustEmbedUnimplementedWebRTCServiceServer()
}

func RegisterWebRTCServiceServer(s grpc.ServiceRegistrar, srv WebRTCServiceServer) {
	s.RegisterService(&WebRTCService_ServiceDesc, srv)
}

func _WebRTCService_UploadP2PVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadP2PVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCServiceServer).UploadP2PVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebRTCService_UploadP2PVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCServiceServer).UploadP2PVideo(ctx, req.(*UploadP2PVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTCService_StopP2PVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopP2PVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCServiceServer).StopP2PVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebRTCService_StopP2PVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCServiceServer).StopP2PVideo(ctx, req.(*StopP2PVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTCService_RenegotiateP2PVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenegotiateP2PVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCServiceServer).RenegotiateP2PVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebRTCService_RenegotiateP2PVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCServiceServer).RenegotiateP2PVideo(ctx, req.(*RenegotiateP2PVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebRTCService_ServiceDesc is the grpc.ServiceDesc for WebRTCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebRTCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webrtc_recorder.WebRTCService",
	HandlerType: (*WebRTCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadP2PVideo",
			Handler:    _WebRTCService_UploadP2PVideo_Handler,
		},
		{
			MethodName: "StopP2PVideo",
			Handler:    _WebRTCService_StopP2PVideo_Handler,
		},
		{
			MethodName: "RenegotiateP2PVideo",
			Handler:    _WebRTCService_RenegotiateP2PVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webrtc.proto",
}
