// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"context"
	"github.com/google/wire"
	"github.com/webitel/webrtc_recorder/config"
	"github.com/webitel/webrtc_recorder/internal/handler"
	"github.com/webitel/webrtc_recorder/internal/service"
	"github.com/webitel/webrtc_recorder/internal/store"
)

import (
	_ "github.com/webitel/webrtc_recorder/infra/resolver"
)

// Injectors from wire.go:

func initAppResources(contextContext context.Context, configConfig *config.Config) (*resources, func(), error) {
	logger, cleanup, err := log(configConfig)
	if err != nil {
		return nil, nil, err
	}
	store, cleanup2, err := setupSQL(contextContext, logger, configConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	manager, cleanup3, err := authManager(configConfig, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	server, cleanup4, err := grpcSrv(configConfig, logger, manager)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	cluster, cleanup5, err := setupCluster(configConfig, server, logger)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	api, cleanup6, err := webrtcAPI(logger, configConfig)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	storage, cleanup7, err := storageClient(configConfig, logger)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	cmdResources := &resources{
		log:     logger,
		store:   store,
		grpcSrv: server,
		cluster: cluster,
		webrtc:  api,
		auth:    manager,
		storage: storage,
		cfg:     configConfig,
	}
	return cmdResources, func() {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

func initAppHandlers(contextContext context.Context, cmdResources *resources) (*handlers, error) {
	logger := cmdResources.log
	api := cmdResources.webrtc
	sessionStore := store.NewSessionStore(logger)
	configConfig := cmdResources.cfg
	tempFileService := service.NewTempFileService(configConfig)
	sqlStore := cmdResources.store
	fileJobStore := store.NewFileJobStore(contextContext, logger, configConfig, sqlStore)
	storage := cmdResources.storage
	uploader := service.NewUploader(contextContext, configConfig, logger, fileJobStore, tempFileService, storage)
	transcoding := service.NewTranscoding(contextContext, configConfig, logger, fileJobStore, tempFileService, uploader)
	webRtcRecorder := service.NewWebRtcRecorder(logger, api, sessionStore, tempFileService, transcoding)
	server := cmdResources.grpcSrv
	webRTCRecorder := handler.NewWebRTCRecorder(webRtcRecorder, server, logger)
	cmdHandlers := &handlers{
		webrtcRecorder: webRTCRecorder,
	}
	return cmdHandlers, nil
}

// wire.go:

var wireAppResourceSet = wire.NewSet(
	log, grpcSrv, setupCluster, setupSQL, webrtcAPI, authManager, storageClient,
)

var wireAppHandlersSet = wire.NewSet(store.NewSessionStore, store.NewFileJobStore, service.NewTempFileService, service.NewUploader, service.NewTranscoding, wire.Bind(new(service.FileJobStore), new(*store.FileJobStore)), service.NewWebRtcRecorder, wire.Bind(new(service.SessionStore), new(*store.SessionStore)), handler.NewWebRTCRecorder, wire.Bind(new(handler.WebRTCRecorderService), new(*service.WebRtcRecorder)))
